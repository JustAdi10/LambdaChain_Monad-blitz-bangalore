{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import{ethers}from'ethers';// Smart Contract Configuration\nconst CONFIG={rpcUrl:'https://rpc.monad.xyz',// Monad mainnet RPC\nregistryAddress:'0x5FbDB2315678afecb367f032d93F642f64180aa3',// Will need to deploy on Monad\npollInterval:2000// 2 seconds\n};// Smart Contract ABI\nconst FUNCTION_REGISTRY_ABI=['function nextFunctionId() external view returns (uint256)','function nextTriggerId() external view returns (uint256)','function functions(uint256) external view returns (bytes32 wasmHash, string name, string description, address owner, uint256 gasLimit, bool active, uint256 createdAt, uint256 executionCount, string runtime)','function triggers(uint256) external view returns (uint256 functionId, uint8 triggerType, bytes triggerData, bool active, uint256 lastTriggered, uint256 triggerCount)','event FunctionRegistered(uint256 indexed functionId, address indexed owner, string name, bytes32 wasmHash)','event TriggerFired(uint256 indexed triggerId, uint256 indexed functionId, bytes contextData)','event FunctionExecuted(uint256 indexed functionId, uint256 indexed triggerId, bool success, uint256 gasUsed)'];export const useBlockchainData=()=>{const[functionCount,setFunctionCount]=useState(0);const[triggerCount,setTriggerCount]=useState(0);const[isConnected,setIsConnected]=useState(false);const[isLoading,setIsLoading]=useState(true);const[performanceData,setPerformanceData]=useState(null);const[recentActivity,setRecentActivity]=useState([]);const[provider,setProvider]=useState(null);const[contract,setContract]=useState(null);// Initialize provider and contract\nuseEffect(()=>{const initializeProvider=async()=>{try{const newProvider=new ethers.JsonRpcProvider(CONFIG.rpcUrl);const newContract=new ethers.Contract(CONFIG.registryAddress,FUNCTION_REGISTRY_ABI,newProvider);// Test connection\nawait newProvider.getNetwork();setProvider(newProvider);setContract(newContract);setIsConnected(true);}catch(error){console.error('Failed to connect to blockchain:',error);setIsConnected(false);}finally{setIsLoading(false);}};initializeProvider();},[]);// Fetch current counts\nconst fetchCounts=useCallback(async()=>{if(!contract)return;try{const[nextFunctionId,nextTriggerId]=await Promise.all([contract.nextFunctionId(),contract.nextTriggerId()]);const functions=Number(nextFunctionId)-1;const triggers=Number(nextTriggerId)-1;setFunctionCount(Math.max(0,functions));setTriggerCount(Math.max(0,triggers));// Update performance data\nsetPerformanceData(prev=>{const now=Date.now();const newDataPoint={timestamp:now,functions,triggers,gasUsed:Math.floor(Math.random()*100000)+50000// Simulated for demo\n};const chartData=(prev===null||prev===void 0?void 0:prev.chartData)||[];const updatedChartData=[...chartData,newDataPoint].slice(-20);// Keep last 20 points\nreturn{tps:Math.floor(Math.random()*1000)+500,// Simulated TPS\navgGas:Math.floor(Math.random()*50000)+25000,// Simulated avg gas\nchartData:updatedChartData};});}catch(error){console.error('Error fetching counts:',error);setIsConnected(false);}},[contract]);// Listen for events and update activity feed\nuseEffect(()=>{if(!contract)return;const handleFunctionRegistered=(functionId,owner,name,wasmHash,event)=>{const activity={id:\"func-\".concat(functionId.toString(),\"-\").concat(Date.now()),type:'function_registered',timestamp:Date.now(),details:\"Function \\\"\".concat(name,\"\\\" registered by \").concat(owner.slice(0,6),\"...\").concat(owner.slice(-4)),txHash:event.transactionHash};setRecentActivity(prev=>[activity,...prev].slice(0,10));// Keep last 10 activities\n};const handleTriggerFired=(triggerId,functionId,contextData,event)=>{const activity={id:\"trigger-\".concat(triggerId.toString(),\"-\").concat(Date.now()),type:'trigger_fired',timestamp:Date.now(),details:\"Trigger \".concat(triggerId.toString(),\" fired for function \").concat(functionId.toString()),txHash:event.transactionHash};setRecentActivity(prev=>[activity,...prev].slice(0,10));};const handleFunctionExecuted=(functionId,triggerId,success,gasUsed,event)=>{const activity={id:\"exec-\".concat(functionId.toString(),\"-\").concat(Date.now()),type:'function_executed',timestamp:Date.now(),details:\"Function \".concat(functionId.toString(),\" \").concat(success?'executed successfully':'failed',\" (\").concat(gasUsed.toString(),\" gas)\"),txHash:event.transactionHash};setRecentActivity(prev=>[activity,...prev].slice(0,10));};// Set up event listeners\ncontract.on('FunctionRegistered',handleFunctionRegistered);contract.on('TriggerFired',handleTriggerFired);contract.on('FunctionExecuted',handleFunctionExecuted);return()=>{contract.removeAllListeners();};},[contract]);// Polling for updates\nuseEffect(()=>{if(!isConnected)return;fetchCounts();// Initial fetch\nconst interval=setInterval(fetchCounts,CONFIG.pollInterval);return()=>clearInterval(interval);},[isConnected,fetchCounts]);return{functionCount,triggerCount,isConnected,isLoading,performanceData,recentActivity,refetch:fetchCounts};};","map":{"version":3,"names":["useState","useEffect","useCallback","ethers","CONFIG","rpcUrl","registryAddress","pollInterval","FUNCTION_REGISTRY_ABI","useBlockchainData","functionCount","setFunctionCount","triggerCount","setTriggerCount","isConnected","setIsConnected","isLoading","setIsLoading","performanceData","setPerformanceData","recentActivity","setRecentActivity","provider","setProvider","contract","setContract","initializeProvider","newProvider","JsonRpcProvider","newContract","Contract","getNetwork","error","console","fetchCounts","nextFunctionId","nextTriggerId","Promise","all","functions","Number","triggers","Math","max","prev","now","Date","newDataPoint","timestamp","gasUsed","floor","random","chartData","updatedChartData","slice","tps","avgGas","handleFunctionRegistered","functionId","owner","name","wasmHash","event","activity","id","concat","toString","type","details","txHash","transactionHash","handleTriggerFired","triggerId","contextData","handleFunctionExecuted","success","on","removeAllListeners","interval","setInterval","clearInterval","refetch"],"sources":["/home/aditya/Desktop/Repos/monad-blitz-bangalore/dashboard/src/hooks/useBlockchainData.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { ethers } from 'ethers';\n\n// Smart Contract Configuration\nconst CONFIG = {\n  rpcUrl: 'https://rpc.monad.xyz', // Monad mainnet RPC\n  registryAddress: '0x5FbDB2315678afecb367f032d93F642f64180aa3', // Will need to deploy on Monad\n  pollInterval: 2000, // 2 seconds\n};\n\n// Smart Contract ABI\nconst FUNCTION_REGISTRY_ABI = [\n  'function nextFunctionId() external view returns (uint256)',\n  'function nextTriggerId() external view returns (uint256)',\n  'function functions(uint256) external view returns (bytes32 wasmHash, string name, string description, address owner, uint256 gasLimit, bool active, uint256 createdAt, uint256 executionCount, string runtime)',\n  'function triggers(uint256) external view returns (uint256 functionId, uint8 triggerType, bytes triggerData, bool active, uint256 lastTriggered, uint256 triggerCount)',\n  'event FunctionRegistered(uint256 indexed functionId, address indexed owner, string name, bytes32 wasmHash)',\n  'event TriggerFired(uint256 indexed triggerId, uint256 indexed functionId, bytes contextData)',\n  'event FunctionExecuted(uint256 indexed functionId, uint256 indexed triggerId, bool success, uint256 gasUsed)'\n];\n\ninterface PerformanceData {\n  tps: number;\n  avgGas: number;\n  chartData: Array<{\n    timestamp: number;\n    functions: number;\n    triggers: number;\n    gasUsed: number;\n  }>;\n}\n\ninterface Activity {\n  id: string;\n  type: 'function_registered' | 'trigger_fired' | 'function_executed';\n  timestamp: number;\n  details: string;\n  txHash?: string;\n}\n\nexport const useBlockchainData = () => {\n  const [functionCount, setFunctionCount] = useState<number>(0);\n  const [triggerCount, setTriggerCount] = useState<number>(0);\n  const [isConnected, setIsConnected] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [performanceData, setPerformanceData] = useState<PerformanceData | null>(null);\n  const [recentActivity, setRecentActivity] = useState<Activity[]>([]);\n  const [provider, setProvider] = useState<ethers.JsonRpcProvider | null>(null);\n  const [contract, setContract] = useState<ethers.Contract | null>(null);\n\n  // Initialize provider and contract\n  useEffect(() => {\n    const initializeProvider = async () => {\n      try {\n        const newProvider = new ethers.JsonRpcProvider(CONFIG.rpcUrl);\n        const newContract = new ethers.Contract(CONFIG.registryAddress, FUNCTION_REGISTRY_ABI, newProvider);\n        \n        // Test connection\n        await newProvider.getNetwork();\n        \n        setProvider(newProvider);\n        setContract(newContract);\n        setIsConnected(true);\n      } catch (error) {\n        console.error('Failed to connect to blockchain:', error);\n        setIsConnected(false);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializeProvider();\n  }, []);\n\n  // Fetch current counts\n  const fetchCounts = useCallback(async () => {\n    if (!contract) return;\n\n    try {\n      const [nextFunctionId, nextTriggerId] = await Promise.all([\n        contract.nextFunctionId(),\n        contract.nextTriggerId()\n      ]);\n\n      const functions = Number(nextFunctionId) - 1;\n      const triggers = Number(nextTriggerId) - 1;\n\n      setFunctionCount(Math.max(0, functions));\n      setTriggerCount(Math.max(0, triggers));\n\n      // Update performance data\n      setPerformanceData(prev => {\n        const now = Date.now();\n        const newDataPoint = {\n          timestamp: now,\n          functions,\n          triggers,\n          gasUsed: Math.floor(Math.random() * 100000) + 50000 // Simulated for demo\n        };\n\n        const chartData = prev?.chartData || [];\n        const updatedChartData = [...chartData, newDataPoint].slice(-20); // Keep last 20 points\n\n        return {\n          tps: Math.floor(Math.random() * 1000) + 500, // Simulated TPS\n          avgGas: Math.floor(Math.random() * 50000) + 25000, // Simulated avg gas\n          chartData: updatedChartData\n        };\n      });\n\n    } catch (error) {\n      console.error('Error fetching counts:', error);\n      setIsConnected(false);\n    }\n  }, [contract]);\n\n  // Listen for events and update activity feed\n  useEffect(() => {\n    if (!contract) return;\n\n    const handleFunctionRegistered = (functionId: bigint, owner: string, name: string, wasmHash: string, event: any) => {\n      const activity: Activity = {\n        id: `func-${functionId.toString()}-${Date.now()}`,\n        type: 'function_registered',\n        timestamp: Date.now(),\n        details: `Function \"${name}\" registered by ${owner.slice(0, 6)}...${owner.slice(-4)}`,\n        txHash: event.transactionHash\n      };\n\n      setRecentActivity(prev => [activity, ...prev].slice(0, 10)); // Keep last 10 activities\n    };\n\n    const handleTriggerFired = (triggerId: bigint, functionId: bigint, contextData: string, event: any) => {\n      const activity: Activity = {\n        id: `trigger-${triggerId.toString()}-${Date.now()}`,\n        type: 'trigger_fired',\n        timestamp: Date.now(),\n        details: `Trigger ${triggerId.toString()} fired for function ${functionId.toString()}`,\n        txHash: event.transactionHash\n      };\n\n      setRecentActivity(prev => [activity, ...prev].slice(0, 10));\n    };\n\n    const handleFunctionExecuted = (functionId: bigint, triggerId: bigint, success: boolean, gasUsed: bigint, event: any) => {\n      const activity: Activity = {\n        id: `exec-${functionId.toString()}-${Date.now()}`,\n        type: 'function_executed',\n        timestamp: Date.now(),\n        details: `Function ${functionId.toString()} ${success ? 'executed successfully' : 'failed'} (${gasUsed.toString()} gas)`,\n        txHash: event.transactionHash\n      };\n\n      setRecentActivity(prev => [activity, ...prev].slice(0, 10));\n    };\n\n    // Set up event listeners\n    contract.on('FunctionRegistered', handleFunctionRegistered);\n    contract.on('TriggerFired', handleTriggerFired);\n    contract.on('FunctionExecuted', handleFunctionExecuted);\n\n    return () => {\n      contract.removeAllListeners();\n    };\n  }, [contract]);\n\n  // Polling for updates\n  useEffect(() => {\n    if (!isConnected) return;\n\n    fetchCounts(); // Initial fetch\n\n    const interval = setInterval(fetchCounts, CONFIG.pollInterval);\n\n    return () => clearInterval(interval);\n  }, [isConnected, fetchCounts]);\n\n  return {\n    functionCount,\n    triggerCount,\n    isConnected,\n    isLoading,\n    performanceData,\n    recentActivity,\n    refetch: fetchCounts\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}