{"ast":null,"code":"import axios from 'axios';\n// Network configurations\nconst NETWORKS = {\n  ethereum: {\n    name: 'Ethereum',\n    chainId: 1,\n    explorerUrl: 'https://etherscan.io',\n    apiUrl: 'https://api.etherscan.io/api'\n  },\n  goerli: {\n    name: 'Goerli',\n    chainId: 5,\n    explorerUrl: 'https://goerli.etherscan.io',\n    apiUrl: 'https://api-goerli.etherscan.io/api'\n  },\n  sepolia: {\n    name: 'Sepolia',\n    chainId: 11155111,\n    explorerUrl: 'https://sepolia.etherscan.io',\n    apiUrl: 'https://api-sepolia.etherscan.io/api'\n  },\n  polygon: {\n    name: 'Polygon',\n    chainId: 137,\n    explorerUrl: 'https://polygonscan.com',\n    apiUrl: 'https://api.polygonscan.com/api'\n  },\n  arbitrum: {\n    name: 'Arbitrum',\n    chainId: 42161,\n    explorerUrl: 'https://arbiscan.io',\n    apiUrl: 'https://api.arbiscan.io/api'\n  },\n  // Monad testnet (custom configuration)\n  monad: {\n    name: 'Monad Testnet',\n    chainId: 10143,\n    explorerUrl: 'https://explorer.monad.xyz',\n    // Placeholder\n    apiUrl: 'https://api.explorer.monad.xyz/api' // Placeholder\n  }\n};\nclass EtherscanService {\n  constructor(chainId = 10143, apiKey) {\n    this.defaultNetwork = void 0;\n    this.apiKey = void 0;\n    this.defaultNetwork = this.getNetworkConfig(chainId);\n    this.apiKey = apiKey;\n  }\n  getNetworkConfig(chainId) {\n    const network = Object.values(NETWORKS).find(n => n.chainId === chainId);\n    return network || NETWORKS.monad; // Default to Monad for unknown networks\n  }\n\n  // Get transaction details\n  async getTransaction(txHash, chainId) {\n    const network = chainId ? this.getNetworkConfig(chainId) : this.defaultNetwork;\n    try {\n      // For Monad or unsupported networks, return mock data\n      if (network.chainId === 10143 || !network.apiUrl.includes('etherscan')) {\n        return this.getMockTransaction(txHash);\n      }\n      const params = {\n        module: 'proxy',\n        action: 'eth_getTransactionByHash',\n        txhash: txHash,\n        apikey: this.apiKey || 'YourApiKeyToken'\n      };\n      const response = await axios.get(network.apiUrl, {\n        params\n      });\n      if (response.data.status === '1' && response.data.result) {\n        return this.formatTransaction(response.data.result);\n      }\n      return null;\n    } catch (error) {\n      console.warn('Failed to fetch transaction from explorer:', error);\n      return this.getMockTransaction(txHash);\n    }\n  }\n\n  // Get transaction receipt\n  async getTransactionReceipt(txHash, chainId) {\n    const network = chainId ? this.getNetworkConfig(chainId) : this.defaultNetwork;\n    try {\n      if (network.chainId === 10143 || !network.apiUrl.includes('etherscan')) {\n        return this.getMockReceipt(txHash);\n      }\n      const params = {\n        module: 'proxy',\n        action: 'eth_getTransactionReceipt',\n        txhash: txHash,\n        apikey: this.apiKey || 'YourApiKeyToken'\n      };\n      const response = await axios.get(network.apiUrl, {\n        params\n      });\n      return response.data.result;\n    } catch (error) {\n      console.warn('Failed to fetch transaction receipt:', error);\n      return this.getMockReceipt(txHash);\n    }\n  }\n\n  // Get account transactions\n  async getAccountTransactions(address, startBlock = 0, endBlock = 99999999, chainId) {\n    const network = chainId ? this.getNetworkConfig(chainId) : this.defaultNetwork;\n    try {\n      if (network.chainId === 10143 || !network.apiUrl.includes('etherscan')) {\n        return this.getMockAccountTransactions(address);\n      }\n      const params = {\n        module: 'account',\n        action: 'txlist',\n        address,\n        startblock: startBlock,\n        endblock: endBlock,\n        page: 1,\n        offset: 100,\n        sort: 'desc',\n        apikey: this.apiKey || 'YourApiKeyToken'\n      };\n      const response = await axios.get(network.apiUrl, {\n        params\n      });\n      if (response.data.status === '1') {\n        return response.data.result;\n      }\n      return [];\n    } catch (error) {\n      console.warn('Failed to fetch account transactions:', error);\n      return this.getMockAccountTransactions(address);\n    }\n  }\n\n  // Generate explorer URL for transaction\n  getTransactionUrl(txHash, chainId) {\n    const network = chainId ? this.getNetworkConfig(chainId) : this.defaultNetwork;\n    return `${network.explorerUrl}/tx/${txHash}`;\n  }\n\n  // Generate explorer URL for address\n  getAddressUrl(address, chainId) {\n    const network = chainId ? this.getNetworkConfig(chainId) : this.defaultNetwork;\n    return `${network.explorerUrl}/address/${address}`;\n  }\n\n  // Generate explorer URL for contract\n  getContractUrl(address, chainId) {\n    const network = chainId ? this.getNetworkConfig(chainId) : this.defaultNetwork;\n    return `${network.explorerUrl}/address/${address}#code`;\n  }\n\n  // Mock data for unsupported networks (like Monad)\n  getMockTransaction(txHash) {\n    return {\n      hash: txHash,\n      blockNumber: String(Math.floor(Math.random() * 1000000) + 19000000),\n      timeStamp: String(Math.floor(Date.now() / 1000)),\n      from: '0x83412990439483714A5ab3CBa7a03AFb7363508C',\n      to: '0x4142d9Ad70f87c359260e6dC41340af5823BC888',\n      value: '0',\n      gas: String(Math.floor(Math.random() * 200000) + 100000),\n      gasPrice: '50000000000',\n      // 50 gwei\n      gasUsed: String(Math.floor(Math.random() * 150000) + 50000),\n      isError: '0',\n      txreceipt_status: '1',\n      input: '0x',\n      contractAddress: '',\n      cumulativeGasUsed: String(Math.floor(Math.random() * 500000) + 100000),\n      confirmations: String(Math.floor(Math.random() * 100) + 1)\n    };\n  }\n  getMockReceipt(txHash) {\n    return {\n      transactionHash: txHash,\n      blockNumber: `0x${(Math.floor(Math.random() * 1000000) + 19000000).toString(16)}`,\n      gasUsed: `0x${(Math.floor(Math.random() * 150000) + 50000).toString(16)}`,\n      status: '0x1',\n      logs: []\n    };\n  }\n  getMockAccountTransactions(address) {\n    return Array.from({\n      length: 5\n    }, (_, i) => ({\n      hash: `0x${Math.random().toString(16).substr(2, 64)}`,\n      blockNumber: String(Math.floor(Math.random() * 1000000) + 19000000 - i * 100),\n      timeStamp: String(Math.floor(Date.now() / 1000) - i * 3600),\n      from: i % 2 === 0 ? address : '0x4142d9Ad70f87c359260e6dC41340af5823BC888',\n      to: i % 2 === 0 ? '0x4142d9Ad70f87c359260e6dC41340af5823BC888' : address,\n      value: '0',\n      gas: String(Math.floor(Math.random() * 200000) + 100000),\n      gasPrice: '50000000000',\n      gasUsed: String(Math.floor(Math.random() * 150000) + 50000),\n      isError: '0',\n      txreceipt_status: '1',\n      input: '0x',\n      contractAddress: '',\n      cumulativeGasUsed: String(Math.floor(Math.random() * 500000) + 100000),\n      confirmations: String(Math.floor(Math.random() * 100) + 1)\n    }));\n  }\n  formatTransaction(rawTx) {\n    return {\n      hash: rawTx.hash,\n      blockNumber: parseInt(rawTx.blockNumber, 16).toString(),\n      timeStamp: Math.floor(Date.now() / 1000).toString(),\n      // Approximate\n      from: rawTx.from,\n      to: rawTx.to,\n      value: parseInt(rawTx.value, 16).toString(),\n      gas: parseInt(rawTx.gas, 16).toString(),\n      gasPrice: parseInt(rawTx.gasPrice, 16).toString(),\n      gasUsed: '0',\n      // Not available in transaction data\n      isError: '0',\n      txreceipt_status: '1',\n      input: rawTx.input,\n      contractAddress: '',\n      cumulativeGasUsed: '0',\n      confirmations: '1'\n    };\n  }\n\n  // Utility methods\n  static formatGasPrice(gasPrice) {\n    const gwei = parseInt(gasPrice) / 1e9;\n    return `${gwei.toFixed(2)} gwei`;\n  }\n  static formatValue(value) {\n    const eth = parseInt(value) / 1e18;\n    if (eth === 0) return '0 ETH';\n    if (eth < 0.001) return `${(eth * 1e18).toFixed(0)} wei`;\n    return `${eth.toFixed(6)} ETH`;\n  }\n  static getNetworkName(chainId) {\n    const network = Object.values(NETWORKS).find(n => n.chainId === chainId);\n    return (network === null || network === void 0 ? void 0 : network.name) || 'Unknown Network';\n  }\n}\nexport default EtherscanService;","map":{"version":3,"names":["axios","NETWORKS","ethereum","name","chainId","explorerUrl","apiUrl","goerli","sepolia","polygon","arbitrum","monad","EtherscanService","constructor","apiKey","defaultNetwork","getNetworkConfig","network","Object","values","find","n","getTransaction","txHash","includes","getMockTransaction","params","module","action","txhash","apikey","response","get","data","status","result","formatTransaction","error","console","warn","getTransactionReceipt","getMockReceipt","getAccountTransactions","address","startBlock","endBlock","getMockAccountTransactions","startblock","endblock","page","offset","sort","getTransactionUrl","getAddressUrl","getContractUrl","hash","blockNumber","String","Math","floor","random","timeStamp","Date","now","from","to","value","gas","gasPrice","gasUsed","isError","txreceipt_status","input","contractAddress","cumulativeGasUsed","confirmations","transactionHash","toString","logs","Array","length","_","i","substr","rawTx","parseInt","formatGasPrice","gwei","toFixed","formatValue","eth","getNetworkName"],"sources":["/home/aditya/Desktop/Repos/monad-blitz-bangalore/dashboard/src/utils/etherscan.ts"],"sourcesContent":["import axios from 'axios';\n\nexport interface EtherscanTransaction {\n  hash: string;\n  blockNumber: string;\n  timeStamp: string;\n  from: string;\n  to: string;\n  value: string;\n  gas: string;\n  gasPrice: string;\n  gasUsed: string;\n  isError: string;\n  txreceipt_status: string;\n  input: string;\n  contractAddress: string;\n  cumulativeGasUsed: string;\n  confirmations: string;\n}\n\nexport interface EtherscanResponse<T> {\n  status: string;\n  message: string;\n  result: T;\n}\n\nexport interface NetworkConfig {\n  name: string;\n  chainId: number;\n  explorerUrl: string;\n  apiUrl: string;\n  apiKey?: string;\n}\n\n// Network configurations\nconst NETWORKS: Record<string, NetworkConfig> = {\n  ethereum: {\n    name: 'Ethereum',\n    chainId: 1,\n    explorerUrl: 'https://etherscan.io',\n    apiUrl: 'https://api.etherscan.io/api',\n  },\n  goerli: {\n    name: 'Goerli',\n    chainId: 5,\n    explorerUrl: 'https://goerli.etherscan.io',\n    apiUrl: 'https://api-goerli.etherscan.io/api',\n  },\n  sepolia: {\n    name: 'Sepolia',\n    chainId: 11155111,\n    explorerUrl: 'https://sepolia.etherscan.io',\n    apiUrl: 'https://api-sepolia.etherscan.io/api',\n  },\n  polygon: {\n    name: 'Polygon',\n    chainId: 137,\n    explorerUrl: 'https://polygonscan.com',\n    apiUrl: 'https://api.polygonscan.com/api',\n  },\n  arbitrum: {\n    name: 'Arbitrum',\n    chainId: 42161,\n    explorerUrl: 'https://arbiscan.io',\n    apiUrl: 'https://api.arbiscan.io/api',\n  },\n  // Monad testnet (custom configuration)\n  monad: {\n    name: 'Monad Testnet',\n    chainId: 10143,\n    explorerUrl: 'https://explorer.monad.xyz', // Placeholder\n    apiUrl: 'https://api.explorer.monad.xyz/api', // Placeholder\n  },\n};\n\nclass EtherscanService {\n  private defaultNetwork: NetworkConfig;\n  private apiKey?: string;\n\n  constructor(chainId: number = 10143, apiKey?: string) {\n    this.defaultNetwork = this.getNetworkConfig(chainId);\n    this.apiKey = apiKey;\n  }\n\n  private getNetworkConfig(chainId: number): NetworkConfig {\n    const network = Object.values(NETWORKS).find(n => n.chainId === chainId);\n    return network || NETWORKS.monad; // Default to Monad for unknown networks\n  }\n\n  // Get transaction details\n  async getTransaction(txHash: string, chainId?: number): Promise<EtherscanTransaction | null> {\n    const network = chainId ? this.getNetworkConfig(chainId) : this.defaultNetwork;\n    \n    try {\n      // For Monad or unsupported networks, return mock data\n      if (network.chainId === 10143 || !network.apiUrl.includes('etherscan')) {\n        return this.getMockTransaction(txHash);\n      }\n\n      const params = {\n        module: 'proxy',\n        action: 'eth_getTransactionByHash',\n        txhash: txHash,\n        apikey: this.apiKey || 'YourApiKeyToken',\n      };\n\n      const response = await axios.get(network.apiUrl, { params });\n      \n      if (response.data.status === '1' && response.data.result) {\n        return this.formatTransaction(response.data.result);\n      }\n      \n      return null;\n    } catch (error) {\n      console.warn('Failed to fetch transaction from explorer:', error);\n      return this.getMockTransaction(txHash);\n    }\n  }\n\n  // Get transaction receipt\n  async getTransactionReceipt(txHash: string, chainId?: number) {\n    const network = chainId ? this.getNetworkConfig(chainId) : this.defaultNetwork;\n    \n    try {\n      if (network.chainId === 10143 || !network.apiUrl.includes('etherscan')) {\n        return this.getMockReceipt(txHash);\n      }\n\n      const params = {\n        module: 'proxy',\n        action: 'eth_getTransactionReceipt',\n        txhash: txHash,\n        apikey: this.apiKey || 'YourApiKeyToken',\n      };\n\n      const response = await axios.get(network.apiUrl, { params });\n      return response.data.result;\n    } catch (error) {\n      console.warn('Failed to fetch transaction receipt:', error);\n      return this.getMockReceipt(txHash);\n    }\n  }\n\n  // Get account transactions\n  async getAccountTransactions(\n    address: string, \n    startBlock: number = 0, \n    endBlock: number = 99999999,\n    chainId?: number\n  ): Promise<EtherscanTransaction[]> {\n    const network = chainId ? this.getNetworkConfig(chainId) : this.defaultNetwork;\n    \n    try {\n      if (network.chainId === 10143 || !network.apiUrl.includes('etherscan')) {\n        return this.getMockAccountTransactions(address);\n      }\n\n      const params = {\n        module: 'account',\n        action: 'txlist',\n        address,\n        startblock: startBlock,\n        endblock: endBlock,\n        page: 1,\n        offset: 100,\n        sort: 'desc',\n        apikey: this.apiKey || 'YourApiKeyToken',\n      };\n\n      const response = await axios.get<EtherscanResponse<EtherscanTransaction[]>>(network.apiUrl, { params });\n      \n      if (response.data.status === '1') {\n        return response.data.result;\n      }\n      \n      return [];\n    } catch (error) {\n      console.warn('Failed to fetch account transactions:', error);\n      return this.getMockAccountTransactions(address);\n    }\n  }\n\n  // Generate explorer URL for transaction\n  getTransactionUrl(txHash: string, chainId?: number): string {\n    const network = chainId ? this.getNetworkConfig(chainId) : this.defaultNetwork;\n    return `${network.explorerUrl}/tx/${txHash}`;\n  }\n\n  // Generate explorer URL for address\n  getAddressUrl(address: string, chainId?: number): string {\n    const network = chainId ? this.getNetworkConfig(chainId) : this.defaultNetwork;\n    return `${network.explorerUrl}/address/${address}`;\n  }\n\n  // Generate explorer URL for contract\n  getContractUrl(address: string, chainId?: number): string {\n    const network = chainId ? this.getNetworkConfig(chainId) : this.defaultNetwork;\n    return `${network.explorerUrl}/address/${address}#code`;\n  }\n\n  // Mock data for unsupported networks (like Monad)\n  private getMockTransaction(txHash: string): EtherscanTransaction {\n    return {\n      hash: txHash,\n      blockNumber: String(Math.floor(Math.random() * 1000000) + 19000000),\n      timeStamp: String(Math.floor(Date.now() / 1000)),\n      from: '0x83412990439483714A5ab3CBa7a03AFb7363508C',\n      to: '0x4142d9Ad70f87c359260e6dC41340af5823BC888',\n      value: '0',\n      gas: String(Math.floor(Math.random() * 200000) + 100000),\n      gasPrice: '50000000000', // 50 gwei\n      gasUsed: String(Math.floor(Math.random() * 150000) + 50000),\n      isError: '0',\n      txreceipt_status: '1',\n      input: '0x',\n      contractAddress: '',\n      cumulativeGasUsed: String(Math.floor(Math.random() * 500000) + 100000),\n      confirmations: String(Math.floor(Math.random() * 100) + 1),\n    };\n  }\n\n  private getMockReceipt(txHash: string) {\n    return {\n      transactionHash: txHash,\n      blockNumber: `0x${(Math.floor(Math.random() * 1000000) + 19000000).toString(16)}`,\n      gasUsed: `0x${(Math.floor(Math.random() * 150000) + 50000).toString(16)}`,\n      status: '0x1',\n      logs: [],\n    };\n  }\n\n  private getMockAccountTransactions(address: string): EtherscanTransaction[] {\n    return Array.from({ length: 5 }, (_, i) => ({\n      hash: `0x${Math.random().toString(16).substr(2, 64)}`,\n      blockNumber: String(Math.floor(Math.random() * 1000000) + 19000000 - i * 100),\n      timeStamp: String(Math.floor(Date.now() / 1000) - i * 3600),\n      from: i % 2 === 0 ? address : '0x4142d9Ad70f87c359260e6dC41340af5823BC888',\n      to: i % 2 === 0 ? '0x4142d9Ad70f87c359260e6dC41340af5823BC888' : address,\n      value: '0',\n      gas: String(Math.floor(Math.random() * 200000) + 100000),\n      gasPrice: '50000000000',\n      gasUsed: String(Math.floor(Math.random() * 150000) + 50000),\n      isError: '0',\n      txreceipt_status: '1',\n      input: '0x',\n      contractAddress: '',\n      cumulativeGasUsed: String(Math.floor(Math.random() * 500000) + 100000),\n      confirmations: String(Math.floor(Math.random() * 100) + 1),\n    }));\n  }\n\n  private formatTransaction(rawTx: any): EtherscanTransaction {\n    return {\n      hash: rawTx.hash,\n      blockNumber: parseInt(rawTx.blockNumber, 16).toString(),\n      timeStamp: Math.floor(Date.now() / 1000).toString(), // Approximate\n      from: rawTx.from,\n      to: rawTx.to,\n      value: parseInt(rawTx.value, 16).toString(),\n      gas: parseInt(rawTx.gas, 16).toString(),\n      gasPrice: parseInt(rawTx.gasPrice, 16).toString(),\n      gasUsed: '0', // Not available in transaction data\n      isError: '0',\n      txreceipt_status: '1',\n      input: rawTx.input,\n      contractAddress: '',\n      cumulativeGasUsed: '0',\n      confirmations: '1',\n    };\n  }\n\n  // Utility methods\n  static formatGasPrice(gasPrice: string): string {\n    const gwei = parseInt(gasPrice) / 1e9;\n    return `${gwei.toFixed(2)} gwei`;\n  }\n\n  static formatValue(value: string): string {\n    const eth = parseInt(value) / 1e18;\n    if (eth === 0) return '0 ETH';\n    if (eth < 0.001) return `${(eth * 1e18).toFixed(0)} wei`;\n    return `${eth.toFixed(6)} ETH`;\n  }\n\n  static getNetworkName(chainId: number): string {\n    const network = Object.values(NETWORKS).find(n => n.chainId === chainId);\n    return network?.name || 'Unknown Network';\n  }\n}\n\nexport default EtherscanService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}